apiVersion: apps/v1
kind: Deployment
metadata:
  name: devserver
  namespace: walden
spec:
  selector:
    matchLabels:
      app: devserver
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: devserver
    spec:
      nodeSelector:
        # We only build an amd64 devserver image
        kubernetes.io/arch: amd64
{{- if .Values.node.selector.devserver }}
{{ toYaml .Values.node.selector.devserver | indent 8 }}
{{- end }}
{{- if .Values.node.toleration.devserver }}
      tolerations:
{{ toYaml .Values.node.toleration.devserver | indent 8 }}
{{- end }}
      containers:
      - image: {{ .Values.image.devserver }}
        name: devserver
        volumeMounts:
        - name: devserver-persistent-storage
          mountPath: /root
        resources:
          requests:
            memory: 2048Mi
          limits:
            memory: 4096Mi
        env:
        - name: HIVE_METASTORE_HOST
          value: metastore
        - name: HIVE_METASTORE_PORT
          value: "9083"
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: user
        - name: MINIO_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: pass
        - name: TRINO_USER
          valueFrom:
            secretKeyRef:
              name: trino-admin
              key: user
        - name: TRINO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trino-admin
              key: pass
        # Custom envvars for e.g. templated credentials in custom connector configs
        {{- range .Values.trino.custom_env }}
        - {{ . | toJson }}
        {{- end }}
      volumes:
      - name: devserver-persistent-storage
        persistentVolumeClaim:
          claimName: devserver-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: devserver-pvc
  namespace: walden
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
