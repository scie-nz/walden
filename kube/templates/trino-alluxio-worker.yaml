# The trino worker, with colocated alluxio worker container.
# Ideally, these should be given as much RAM as possible.
# The alluxio workers must be accessible over localhost by clients.
# Another strategy would be to run the alluxio workers as a daemonset,
# but in this case they are only being accessed via the trino workers.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: trino-worker
  name: trino-worker
  namespace: walden
spec:
  serviceName: trino-worker
  # Allow changes to deploy in parallel
  podManagementPolicy: Parallel
  replicas: {{ .Values.trino.worker_replicas }}
  selector:
    matchLabels:
      app: trino-worker
  template:
    metadata:
      labels:
        app: trino-worker
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: copy-configs
        image: {{ .Values.image.busybox }}
        command:
        - sh
        - -c
        - |
          cp -v /conf/* /etc-out/ &&
          mkdir -p /etc-out/catalog &&
          cp -v /catalog/* /etc-out/catalog &&
          sed -i "s/__MINIO_ACCESS_KEY_ID/$MINIO_ACCESS_KEY_ID/g" /etc-out/catalog/* &&
          sed -i "s/__MINIO_ACCESS_KEY_SECRET/$MINIO_ACCESS_KEY_SECRET/g" /etc-out/catalog/*
        env:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: user
        - name: MINIO_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: pass
        volumeMounts:
        - name: trino-config
          mountPath: /conf
        - name: trino-catalog
          mountPath: /catalog
        - name: trino-etc
          mountPath: /etc-out

      containers:

      - name: trino-worker
        image: {{ .Values.image.trino }}
        env:
        - name: HIVE_METASTORE_HOST
          value: metastore
        - name: HIVE_METASTORE_PORT
          value: "9083"
        - name: CONFIG_JVM_HEAP
          value: "{{ .Values.trino.mem_jvm_heap }}"
        - name: CONFIG_QUERY_MAX_MEMORY_PER_NODE
          value: "{{ .Values.trino.config.query_max_memory_per_node }}"
        - name: CONFIG_QUERY_MAX_MEMORY
          value: "{{ .Values.trino.config.query_max_memory }}"
        - name: CONFIG_MEMORY_HEAP_HEADROOM_PER_NODE
          value: "{{ .Values.trino.config.memory_heap_headroom_per_node }}"
        - name: CONFIG_MAX_SPILL_PER_NODE
          value: "{{ .Values.trino.config.max_spill_per_node }}"
        - name: CONFIG_QUERY_MAX_SPILL_PER_NODE
          value: "{{ .Values.trino.config.query_max_spill_per_node }}"
        resources:
          limits:
            memory: {{ .Values.trino.mem_limit_worker }}
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: trino-etc
          mountPath: /trino-server/etc
        - name: storage
          mountPath: /storage # spill storage under /storage/spill
        - name: alluxio-domain
          mountPath: /opt/domain

      - name: alluxio-worker
        image: {{ .Values.image.alluxio }}
        imagePullPolicy: IfNotPresent
        command: ["tini", "--", "/entrypoint.sh"]
        args:
        - worker-only
        - --no-format
        env:
        - name: ALLUXIO_WORKER_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: ALLUXIO_WORKER_CONTAINER_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: ALLUXIO_MASTER_MOUNT_TABLE_ROOT_UFS
          value: {{ .Values.alluxio.root_mount }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: user
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: pass
        envFrom:
        - configMapRef:
            name: alluxio-config
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
        readinessProbe:
          tcpSocket:
            port: alluxio-rpc
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          tcpSocket:
            port: alluxio-rpc
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 2
        ports:
        - name: alluxio-rpc
          containerPort: 29999
        - name: alluxio-web
          containerPort: 30000
        volumeMounts:
        - name: alluxio-domain
          mountPath: /opt/domain
        - name: alluxio-mem
          mountPath: /dev/shm
{{- if and .Values.alluxio.nfs_server .Values.alluxio.nfs_path }}
        - name: nfs-data
          mountPath: /mnt/nfs
{{- end }}

      - name: alluxio-job
        image: {{ .Values.image.alluxio }}
        imagePullPolicy: IfNotPresent
        command: ["tini", "--", "/entrypoint.sh"]
        args:
        - job-worker
        env:
        - name: ALLUXIO_WORKER_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: ALLUXIO_WORKER_CONTAINER_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: ALLUXIO_MASTER_MOUNT_TABLE_ROOT_UFS
          value: {{ .Values.alluxio.root_mount }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: user
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: pass
        envFrom:
        - configMapRef:
            name: alluxio-config
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
        readinessProbe:
          tcpSocket:
            port: job-rpc
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          tcpSocket:
            port: job-rpc
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 2
        ports:
        - containerPort: 30001
          name: job-rpc
        - containerPort: 30002
          name: job-data
        - containerPort: 30003
          name: job-web
        volumeMounts:
        - name: alluxio-domain
          mountPath: /opt/domain
        - name: alluxio-mem
          mountPath: /dev/shm
{{- if and .Values.alluxio.nfs_server .Values.alluxio.nfs_path }}
        - name: nfs-data
          mountPath: /mnt/nfs
{{- end }}

      volumes:
      - name: trino-config
        configMap:
          name: trino-config
      - name: trino-catalog
        configMap:
          name: trino-catalog
      - name: trino-etc
        emptyDir: {}
      - name: alluxio-domain
        emptyDir: {}
      - name: alluxio-mem
        emptyDir:
          medium: "Memory"
          sizeLimit: 1G
{{- if and .Values.alluxio.nfs_server .Values.alluxio.nfs_path }}
      - name: nfs-data
        nfs:
          server: {{ .Values.alluxio.nfs_server }}
          path: {{ .Values.alluxio.nfs_path }}
{{- end }}

  volumeClaimTemplates:

  - metadata:
      name: storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.trino.disk_worker }}
