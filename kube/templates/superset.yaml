apiVersion: v1
kind: ConfigMap
metadata:
  name: superset
  namespace: walden
  labels:
    app: superset
data:
  superset_config.py: |
{{ .Files.Get "configs/superset_config.py" | indent 4 }}
  superset_init.sh: |
{{ .Files.Get "configs/superset_init.sh" | indent 4 }}
  superset_copy_configs.sh: |
{{ .Files.Get "configs/superset_copy_configs.sh" | indent 4 }}
  superset_datasources.yaml: |
    databases:
    - database_name: trino-hive
      allow_ctas: true
      allow_cvas: true
      allow_run_async: true
      extra: '{"cost_estimate_enabled":true,"allows_virtual_table_explore":true,"metadata_params":{},"engine_params":{},"schemas_allowed_for_csv_upload":[]}'
      sqlalchemy_uri: trino://trino:80/hive
    - database_name: trino-system
      allow_run_async: true
      extra: '{"cost_estimate_enabled":true,"allows_virtual_table_explore":true,"metadata_params":{},"engine_params":{},"schemas_allowed_for_csv_upload":[]}'
      sqlalchemy_uri: trino://trino:80
      tables: []
{{- range $name, $props := .Values.trino.custom_catalogs }}
    - database_name: trino-{{ $name }}
      allow_run_async: true
      extra: '{"cost_estimate_enabled":true,"allows_virtual_table_explore":true,"metadata_params":{},"engine_params":{},"schemas_allowed_for_csv_upload":[]}'
      sqlalchemy_uri: trino://trino:80/{{ $name }}
      tables: []
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: superset
  namespace: walden
  labels:
    app: superset
spec:
{{- if .Values.superset.external_ip }}
  externalIPs:
  - {{ .Values.superset.external_ip }}
{{- end }}
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: superset
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-worker
  namespace: walden
  labels:
    app: superset-worker
spec:
  replicas: {{ .Values.superset.worker_replicas }}
  selector:
    matchLabels:
      app: superset-worker
  template:
    metadata:
      labels:
        app: superset-worker
    spec:
      nodeSelector:
        # We only build an amd64 superset image
        kubernetes.io/arch: amd64
{{- if .Values.node.selector.superset_worker }}
{{ toYaml .Values.node.selector.superset_worker | indent 8 }}
{{- end }}
{{- if .Values.node.toleration.superset_worker }}
      tolerations:
{{ toYaml .Values.node.toleration.superset_worker | indent 8 }}
{{- end }}
      initContainers:

      - name: init-config
        image: {{ .Values.image.busybox }}
        command:
        - /bin/sh
        - /walden/superset_copy_configs.sh
        volumeMounts:
        - name: config
          mountPath: /out
        - name: config-walden
          mountPath: /walden
          readOnly: true
        - name: config-custom
          mountPath: /custom
          readOnly: true
        - name: secrets-custom
          mountPath: /secrets
          readOnly: true

      - name: wait-for-postgres
        image: {{ .Values.image.busybox }}
        command:
        - /bin/sh
        - -c
        - until nc -zv $POSTGRES_HOST $POSTGRES_PORT -w1; do echo 'waiting for postgres'; sleep 1; done
        env:
        - name: POSTGRES_HOST
          value: superset-postgres
        - name: POSTGRES_PORT
          value: "5432"

      containers:

      - name: superset
        image: {{ .Values.image.superset }}
        command:
        - celery
        - --app=superset.tasks.celery_app:app
        - worker
        env:
        # Celery app invokes superset_config.py
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-key
              key: secret_key
        #- name: MAPBOX_API_KEY
        #  value: ""
        - name: REDIS_HOST
          value: superset-redis
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-redis
              key: pass
        - name: POSTGRES_HOST
          value: superset-postgres
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: superset-postgres
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-postgres
              key: pass
        resources:
          limits:
            memory: {{ .Values.superset.mem_limit_worker }}i # "nG" => "nGi"
        volumeMounts:
        - name: config
          mountPath: /app/pythonpath
          readOnly: true
      volumes:
      - name: config
        emptyDir: {}
      - name: config-walden
        configMap:
          name: superset
      - name: config-custom
        configMap:
          name: superset-custom
          optional: true
      - name: secrets-custom
        secret:
          secretName: superset-custom
          optional: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset
  namespace: walden
  labels:
    app: superset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
  template:
    metadata:
      labels:
        app: superset
    spec:
      nodeSelector:
        # We only build an amd64 superset image
        kubernetes.io/arch: amd64
{{- if .Values.node.selector.superset }}
{{ toYaml .Values.node.selector.superset | indent 8 }}
{{- end }}
{{- if .Values.node.toleration.superset }}
      tolerations:
{{ toYaml .Values.node.toleration.superset | indent 8 }}
{{- end }}
      initContainers:

      - name: init-config
        image: {{ .Values.image.busybox }}
        command:
        - /bin/sh
        - /walden/superset_copy_configs.sh
        volumeMounts:
        - name: config
          mountPath: /out
        - name: config-walden
          mountPath: /walden
          readOnly: true
        - name: config-custom
          mountPath: /custom
          readOnly: true
        - name: secrets-custom
          mountPath: /secrets
          readOnly: true

      - name: wait-for-postgres
        image: {{ .Values.image.busybox }}
        command:
        - /bin/sh
        - -c
        - until nc -zv $POSTGRES_HOST $POSTGRES_PORT -w1; do echo 'waiting for postgres'; sleep 1; done
        env:
        - name: POSTGRES_HOST
          value: superset-postgres
        - name: POSTGRES_PORT
          value: "5432"

      containers:

      - name: superset
        image: {{ .Values.image.superset }}
        # Newer images should have /usr/bin/run-server.sh, but as of 1.4.0 it doesn't exist yet.
        # In the meantime (or indefinitely?) we can just run the underlying gunicorn command directly.
        command:
        - /bin/sh
        - -c
        # Before starting the server, fix Ctrl+X cut shortcut being broken in SQL Lab.
        # See also https://github.com/apache/superset/issues/9990
        - |
          sed -i s/ctrl+x/alt+x/ /app/superset/static/assets/sqllab.*.js \
          && gunicorn \
              --bind 0.0.0.0:8088 \
              --access-logfile - \
              --error-logfile - \
              --workers 1 \
              --worker-class gthread \
              --threads 20 \
              --timeout 60 \
              --limit-request-line 0 \
              --limit-request-field_size 0 \
              "superset.app:create_app()"
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-key
              key: secret_key
        #- name: MAPBOX_API_KEY
        #  value: ""
        - name: REDIS_HOST
          value: superset-redis
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-redis
              key: pass
        - name: POSTGRES_HOST
          value: superset-postgres
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: superset-postgres
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-postgres
              key: pass
        resources:
          limits:
            memory: {{ .Values.superset.mem_limit_server }}i # "nG" => "nGi"
        volumeMounts:
        - name: config
          mountPath: /app/pythonpath
          readOnly: true
        ports:
        - name: http
          containerPort: 8088
          protocol: TCP

      - name: init
        image: {{ .Values.image.superset }}
        command:
        - /bin/sh
        - -c
        - |
          . /app/pythonpath/superset_init.sh;
          echo 'Done, sleeping forever';
          touch /tmp/ready;
          sleep infinity
        env:
        # Used by superset_init.sh
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: superset-admin
              key: user
        - name: ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: superset-admin
              key: pass
        # "Upgrading DB schema" step invokes superset_config.py
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-key
              key: secret_key
        - name: REDIS_HOST
          value: superset-redis
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-redis
              key: pass
        - name: POSTGRES_HOST
          value: superset-postgres
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: superset-postgres
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-postgres
              key: pass
        startupProbe:
          # Check that 'init' sidecar has finished
          exec:
            command:
            - /bin/sh
            - -c
            - if [ ! -f /tmp/ready ]; then exit 1; fi
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 90
        volumeMounts:
        - name: config
          mountPath: /app/pythonpath
          readOnly: true

      volumes:
      - name: config
        emptyDir: {}
      - name: config-walden
        configMap:
          name: superset
      - name: config-custom
        configMap:
          name: superset-custom
          optional: true
      - name: secrets-custom
        secret:
          secretName: superset-custom
          optional: true
