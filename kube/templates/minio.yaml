---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: walden
  labels:
    app: minio
spec:
  ports:
  - name: s3
    port: 9000
    targetPort: s3
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  name: minio-headless
  namespace: walden
  labels:
    app: minio
spec:
  ports:
  - name: s3
    port: 9000
    targetPort: s3
  clusterIP: None
  selector:
    app: minio
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: walden
  labels:
    app: minio
spec:
  serviceName: minio-headless
  replicas: {{ .Values.minio.replicas }}
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      # Minio is a good candidate for running on ARM when available.
      # However, Minio complains if we have mixed architectures, so lock it to only run on a single arch.
      nodeSelector:
        kubernetes.io/arch: {{ .Values.minio.arch }}
      # Ensure that each minio pod is placed on a separate node from other minio pods.
      # If you do not have at least four nodes, you can comment this out.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - minio
            topologyKey: "kubernetes.io/hostname"
      # Run containers as nobody:nogroup
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsGroup: 65534
      containers:
      - name: minio
        image: {{ .Values.image.minio }}
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: user
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: pass
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MINIO_MAX_HOSTNUM
          # For N pods, we want '0...N-1' to match pod hostnames, see below.
          value: "{{ sub .Values.minio.replicas 1 }}"
        command:
        - /bin/bash
        - -c
        # Must provide each pod with the total replica count.
        # see https://docs.min.io/docs/distributed-minio-quickstart-guide.html
        - 'minio server http://minio-{0...${MINIO_MAX_HOSTNUM}}.minio-headless.${NAMESPACE}.svc.cluster.local:9000/data'
        resources:
          limits:
            memory: {{ .Values.minio.mem_limit }}
        ports:
        - name: s3
          containerPort: 9000
        volumeMounts:
        - name: storage
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
