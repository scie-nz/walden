---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-catalog
  namespace: walden
data:
  # Configure Trino to write Hive data via MinIO
  core-site.xml: |
{{ .Files.Get "configs/trino_core-site.xml" | indent 4 }}
  hive.properties: |
{{ .Files.Get "configs/trino_hive.properties" | indent 4 }}

  # Enable TPCH benchmark schemas
  # See: https://trino.io/docs/current/connector/tpch.html
  tpch.properties: |
    connector.name=tpch

{{- if .Values.trino.catalog_custom }}
  # Custom user catalog entry
  custom.properties: |
{{ .Values.trino.catalog_custom | indent 4 }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-config
  namespace: walden
data:
  config.properties.template: |
{{ .Files.Get "configs/trino_config.properties.template" | indent 4 }}
  postgres.properties: |
{{ .Files.Get "configs/trino_postgres.properties" | indent 4 }}
  jvm.config.template: |
{{ .Files.Get "configs/trino_jvm.config.template" | indent 4 }}
  log.properties: |
{{ .Files.Get "configs/trino_log.properties" | indent 4 }}
  node.properties.template: |
{{ .Files.Get "configs/trino_node.properties.template" | indent 4 }}
  password-authenticator.properties: |
{{ .Files.Get "configs/trino_password-authenticator.properties" | indent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  name: trino
  namespace: walden
  labels:
    app: trino-coordinator
spec:
{{- if .Values.trino.external_ip }}
  externalIPs:
  - {{ .Values.trino.external_ip }}
{{- end }}
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app: trino-coordinator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: trino-coordinator
  name: trino-coordinator
  namespace: walden
spec:
  replicas: 1
  selector:
    matchLabels:
      app: trino-coordinator
  template:
    metadata:
      labels:
        app: trino-coordinator
    spec:
      nodeSelector:
        # We only build an amd64 trino image
        kubernetes.io/arch: amd64
      initContainers:
      - name: copy-configs
        # Use walden-trino image, rather than busybox, to have access to htpasswd command
        image: {{ .Values.image.trino }}
        command:
        - /bin/sh
        - -c
        # TODO We currently generate a credentials file as an example.
        #      Trino requires that SSL be enabled before credentials will be used.
        - |
          cp -v /conf/* /etc-out/ &&
          mkdir -p /etc-out/catalog &&
          cp -v /catalog/* /etc-out/catalog &&
          sed -i "s/__MINIO_ACCESS_KEY_ID/$MINIO_ACCESS_KEY_ID/g" /etc-out/catalog/* &&
          sed -i "s/__MINIO_ACCESS_KEY_SECRET/$MINIO_ACCESS_KEY_SECRET/g" /etc-out/catalog/* &&
          htpasswd -c -b -B -C 10 /etc-out/password.db "$TRINO_USER" "$TRINO_PASSWORD"
        env:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: user
        - name: MINIO_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: pass
        - name: TRINO_USER
          valueFrom:
            secretKeyRef:
              name: trino-admin
              key: user
        - name: TRINO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trino-admin
              key: pass
        volumeMounts:
        - name: config
          mountPath: /conf
        - name: catalog
          mountPath: /catalog
        - name: etc
          mountPath: /etc-out
      containers:
      - name: trino-coordinator
        image: {{ .Values.image.trino }}
        env:
        - name: HIVE_METASTORE_HOST
          value: metastore
        - name: HIVE_METASTORE_PORT
          value: "9083"
        - name: CONFIG_JVM_HEAP
          value: "{{ .Values.trino.mem_jvm_heap }}"
        - name: CONFIG_QUERY_MAX_MEMORY_PER_NODE
          value: "{{ .Values.trino.config.query_max_memory_per_node }}"
        - name: CONFIG_QUERY_MAX_MEMORY
          value: "{{ .Values.trino.config.query_max_memory }}"
        - name: CONFIG_MEMORY_HEAP_HEADROOM_PER_NODE
          value: "{{ .Values.trino.config.memory_heap_headroom_per_node }}"
        - name: CONFIG_MAX_SPILL_PER_NODE
          value: "{{ .Values.trino.config.max_spill_per_node }}"
        - name: CONFIG_QUERY_MAX_SPILL_PER_NODE
          value: "{{ .Values.trino.config.query_max_spill_per_node }}"
        resources:
          limits:
            memory: {{ .Values.trino.mem_limit_coordinator }}
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: etc
          mountPath: /trino-server/etc
      volumes:
      - name: config
        configMap:
          name: trino-config
      - name: catalog
        configMap:
          name: trino-catalog
      - name: etc
        emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: trino-worker
  name: trino-worker
  namespace: walden
spec:
  serviceName: trino-worker
  # Allow changes to deploy in parallel
  podManagementPolicy: Parallel
  replicas: {{ .Values.trino.worker_replicas }}
  selector:
    matchLabels:
      app: trino-worker
  template:
    metadata:
      labels:
        app: trino-worker
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: copy-configs
        image: {{ .Values.image.busybox }}
        command:
        - sh
        - -c
        - |
          cp -v /conf/* /etc-out/ &&
          mkdir -p /etc-out/catalog &&
          cp -v /catalog/* /etc-out/catalog &&
          sed -i "s/__MINIO_ACCESS_KEY_ID/$MINIO_ACCESS_KEY_ID/g" /etc-out/catalog/* &&
          sed -i "s/__MINIO_ACCESS_KEY_SECRET/$MINIO_ACCESS_KEY_SECRET/g" /etc-out/catalog/*
        env:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: user
        - name: MINIO_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: minio-root
              key: pass
        volumeMounts:
        - name: config
          mountPath: /conf
        - name: catalog
          mountPath: /catalog
        - name: etc
          mountPath: /etc-out
      containers:
      - name: trino-worker
        image: {{ .Values.image.trino }}
        env:
        - name: HIVE_METASTORE_HOST
          value: metastore
        - name: HIVE_METASTORE_PORT
          value: "9083"
        - name: CONFIG_JVM_HEAP
          value: "{{ .Values.trino.mem_jvm_heap }}"
        - name: CONFIG_QUERY_MAX_MEMORY_PER_NODE
          value: "{{ .Values.trino.config.query_max_memory_per_node }}"
        - name: CONFIG_QUERY_MAX_MEMORY
          value: "{{ .Values.trino.config.query_max_memory }}"
        - name: CONFIG_MEMORY_HEAP_HEADROOM_PER_NODE
          value: "{{ .Values.trino.config.memory_heap_headroom_per_node }}"
        - name: CONFIG_MAX_SPILL_PER_NODE
          value: "{{ .Values.trino.config.max_spill_per_node }}"
        - name: CONFIG_QUERY_MAX_SPILL_PER_NODE
          value: "{{ .Values.trino.config.query_max_spill_per_node }}"
        resources:
          limits:
            memory: {{ .Values.trino.mem_limit_worker }}
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: etc
          mountPath: /trino-server/etc
        - name: storage
          mountPath: /storage # spill storage under /storage/spill
      volumes:
      - name: config
        configMap:
          name: trino-config
      - name: catalog
        configMap:
          name: trino-catalog
      - name: etc
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.trino.disk_worker }}
